const prisma = require("../config/database");
const multer = require("multer"); // ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô functions ‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ ‡πÅ‡∏ï‡πà‡∏°‡∏µ import ‡πÑ‡∏ß‡πâ
const path = require("path"); // ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô functions ‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ ‡πÅ‡∏ï‡πà‡∏°‡∏µ import ‡πÑ‡∏ß‡πâ

exports.getAllCertificates = async (req, res) => {
  const userRole = req.user.role;
  const userId = req.user.id;

  try {
    const orderByOptions = { certificate_code: "asc" };

    if (userRole === "admin") {
      // Admin ‡πÄ‡∏´‡πá‡∏ô‡∏ó‡∏∏‡∏Å‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á
      const certificates = await prisma.certificate_types.findMany({
        orderBy: orderByOptions,
      });
      return res.json(certificates);
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    const certificates = await prisma.certificate_types.findMany({
      where: { is_active: 1 },
      orderBy: orderByOptions,
    });

    // ‚úÖ ‡∏î‡∏∂‡∏á submission ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö type = "Certificate"
    const userSubmissions = await prisma.submissions.findMany({
      where: {
        user_id: userId,
        type: "Certificate",
      },
      include: {
        academic_years: true,
      },
    });

    // ‚úÖ ‡∏ú‡∏π‡∏Å submission ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö certificate ‡πÇ‡∏î‡∏¢‡∏î‡∏π‡∏à‡∏≤‡∏Å file_path (‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏ß‡πâ)
    const enrichedCertificates = certificates.map((cert) => {
      const matchedSub = userSubmissions.find((sub) =>
        sub.file_path?.includes(cert.certificate_code)
      );

      return {
        ...cert,
        submission_status: matchedSub?.status || null,
        submitted_at: matchedSub?.created_at || null,
        updated_at: matchedSub?.updated_at || null,
        approved_academic_year:
          matchedSub?.status === "approved"
            ? matchedSub.academic_years?.year_name || null
            : null,
      };
    });

    return res.json(enrichedCertificates);
  } catch (error) {
    console.error("‚ùå Error fetching certificates:", error);
    return res.status(500).json({ error: "Failed to fetch certificates" });
  }
};

const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, "uploads/");
  },

  filename: (req, file, cb) => {
    cb(null, Date.now() + path.extname(file.originalname));
  },
});

const upload = multer({ storage });

// ‚úÖ API ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á

exports.uploadCertificateFile = async (req, res) => {
  const { certificate_type_id, academic_year_id, user_id } = req.body;

  if (!req.file) {
    return res.status(400).json({ error: "‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
  }

  try {
    await prisma.submission_details.create({
      data: {
        submission_id: user_id + "-" + academic_year_id, // üîπ ‡πÉ‡∏ä‡πâ user_id + academic_year_id ‡πÄ‡∏õ‡πá‡∏ô submission_id

        certificate_type_id,

        file_path: req.file.path,

        status: "pending",
      },
    });

    res.json({ message: "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", file: req.file.path });
  } catch (error) {
    console.error("‚ùå Error uploading file:", error);

    res.status(500).json({ error: "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  }
};



// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà (Admin Only) - ‡πÄ‡∏û‡∏¥‡πà‡∏° category
exports.createCertificate = async (req, res) => {
  // ‡∏£‡∏±‡∏ö category ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å req.body
  const { certificate_code, certificate_name, hours, category, is_active } =
    req.body;

  // --- ‡πÄ‡∏û‡∏¥‡πà‡∏° Validation ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö category ---
  if (!category) {
    return res.status(400).json({ error: "Category is required" });
  }
  const hoursNum = parseInt(hours, 10);
  if (isNaN(hoursNum) || hoursNum <= 0) {
    return res.status(400).json({ error: "Hours must be a positive number" });
  }

  try {
    const existingCertificate = await prisma.certificate_types.findUnique({
      where: { certificate_code },
    });

    if (existingCertificate) {
      return res.status(400).json({ error: "Certificate code already exists" });
    }

    const newCertificate = await prisma.certificate_types.create({
      data: {
        certificate_code,
        certificate_name,
        hours: hoursNum, // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Int ‡πÅ‡∏•‡πâ‡∏ß
        category: category, // <-- ‡πÄ‡∏û‡∏¥‡πà‡∏° category
        is_active: is_active ?? 1, // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠ default ‡πÄ‡∏õ‡πá‡∏ô 1
      },
    });

    res.status(201).json({
      // ‡πÉ‡∏ä‡πâ 201 Created
      message: "Certificate type created successfully",
      data: newCertificate,
    });
  } catch (error) {
    console.error("‚ùå Error creating certificate:", error);
    res.status(500).json({ error: "Failed to create certificate" });
  }
};

// ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á (Admin Only) - ‡πÄ‡∏û‡∏¥‡πà‡∏° category
exports.updateCertificate = async (req, res) => {
  const { certificate_type_id } = req.params; // ID ‡πÄ‡∏õ‡πá‡∏ô String (UUID)
  // ‡∏£‡∏±‡∏ö category ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å req.body
  const { certificate_code, certificate_name, hours, category, is_active } =
    req.body;

  // Validation ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
  const hoursNum = parseInt(hours, 10);
  if (isNaN(hoursNum) || hoursNum <= 0) {
    return res.status(400).json({ error: "Hours must be a positive number" });
  }
  // --- ‡πÄ‡∏û‡∏¥‡πà‡∏° Validation ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö category ---
  if (!category) {
    return res.status(400).json({ error: "Category is required" });
  }
  // --- ------------------------------- ---

  try {
    const updatedCertificate = await prisma.certificate_types.update({
      // where id ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á String() ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ô schema ‡πÄ‡∏õ‡πá‡∏ô String @db.Char(36)
      where: { certificate_type_id: certificate_type_id },
      data: {
        certificate_code,
        certificate_name,
        hours: hoursNum, // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Int ‡πÅ‡∏•‡πâ‡∏ß
        category: category, // <-- ‡πÄ‡∏û‡∏¥‡πà‡∏° category
        // is_active ‡∏Ñ‡∏ß‡∏£‡∏™‡πà‡∏á‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô 1 ‡∏´‡∏£‡∏∑‡∏≠ 0 ‡∏à‡∏≤‡∏Å Frontend ‡∏ñ‡πâ‡∏≤ Field ‡πÄ‡∏õ‡πá‡∏ô Int
        // ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏õ‡∏•‡∏á boolean ‡πÄ‡∏õ‡πá‡∏ô Int ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏Å‡πá‡πÑ‡∏î‡πâ ‡∏ñ‡πâ‡∏≤ Frontend ‡∏™‡πà‡∏á boolean ‡∏°‡∏≤
        is_active: is_active === undefined ? undefined : is_active ? 1 : 0, // ‡πÅ‡∏õ‡∏•‡∏á Boolean/undefined ‡πÄ‡∏õ‡πá‡∏ô 1/0/undefined
      },
    });

    res.json({
      message: "Certificate updated successfully",
      data: updatedCertificate,
    });
  } catch (error) {
    console.error("‚ùå Error updating certificate:", error);
    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Error ‡∏à‡∏≤‡∏Å Prisma (‡πÄ‡∏ä‡πà‡∏ô Not Found) ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (error.code === "P2025") {
      // Prisma error code for record not found
      return res.status(404).json({ error: "Certificate not found" });
    }
    res.status(500).json({ error: "Failed to update certificate" });
  }
};

// ‚úÖ ‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á (Admin Only) - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç where ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö type
exports.deleteCertificate = async (req, res) => {
  const { certificate_type_id } = req.params; // ID ‡πÄ‡∏õ‡πá‡∏ô String (UUID)

  try {
    await prisma.certificate_types.delete({
      where: { certificate_type_id: certificate_type_id }, // ‡πÉ‡∏ä‡πâ ID ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô String ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    });
    // ‡πÉ‡∏ä‡πâ 204 No Content ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö DELETE ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ body ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
    res.status(204).send();
    // ‡∏´‡∏£‡∏∑‡∏≠ res.json({ message: "Certificate deleted successfully" });
  } catch (error) {
    console.error("‚ùå Error deleting certificate:", error);
    if (error.code === "P2025") {
      return res.status(404).json({ error: "Certificate not found" });
    } else if (error.code === "P2003") {
      // Foreign key constraint failed
      return res
        .status(400)
        .json({
          error: "Cannot delete certificate type, it is currently in use.",
        });
    }
    res.status(500).json({ error: "Failed to delete certificate" });
  }
};

// ‚úÖ ‡∏õ‡∏¥‡∏î/‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç where ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö type
exports.toggleCertificateStatus = async (req, res) => {
  const { certificate_type_id } = req.params; // ID ‡πÄ‡∏õ‡πá‡∏ô String (UUID)
  const { is_active } = req.body; // ‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï (‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏´‡∏£‡∏∑‡∏≠ 1)

  // Basic validation
  if (is_active === undefined || (is_active !== 0 && is_active !== 1)) {
    return res
      .status(400)
      .json({ error: "Invalid 'is_active' value. Must be 0 or 1." });
  }

  try {
    const updatedCertificate = await prisma.certificate_types.update({
      // where id ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á parseInt ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô String UUID
      where: { certificate_type_id: certificate_type_id },
      data: { is_active: is_active }, // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å 0 ‡∏´‡∏£‡∏∑‡∏≠ 1 ‡∏•‡∏á‡πÑ‡∏õ
    });

    res.json({
      message: `Certificate status updated successfully`,
      data: updatedCertificate,
    });
  } catch (error) {
    console.error("‚ùå TOGGLE STATUS ERROR:", error);
    if (error.code === "P2025") {
      return res.status(404).json({ error: "Certificate not found" });
    }
    res.status(500).json({ error: "Failed to update certificate status" });
  }
};