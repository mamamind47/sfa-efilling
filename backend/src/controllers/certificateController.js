const prisma = require("../config/database");

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
exports.getAllCertificates = async (req, res) => {
  try {
    const certificates = await prisma.certificate_types.findMany();
    res.json(certificates);
  } catch (error) {
    res.status(500).json({ error: "Failed to fetch certificates" });
    console.log(error);
  }
};

// exports.getAllCertificates = async (req, res) => {
//   const { role, user_id, academic_year_id, current_year } = req.query; // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å query parameters

//   try {
//     let certificates;

//     if (role === "admin") {
//       // ‚úÖ ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏´‡πá‡∏ô‡∏ó‡∏∏‡∏Å‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á
//       certificates = await prisma.certificate_types.findMany();
//     } else {
//       if (current_year === "true") {
//         // ‚úÖ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡πà‡∏ô‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á (‡∏õ‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô) ‚Üí ‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
//         certificates = await prisma.certificate_types.findMany({
//           where: { is_active: 1 },
//         });
//       } else {
//         // ‚úÖ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á ‚Üí ‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏¢‡∏∑‡πà‡∏ô
//         certificates = await prisma.certificate_types.findMany({
//           where: {
//             OR: [
//               { is_active: 1 }, // ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
//               {
//                 submission_details: {
//                   some: {
//                     submission: {
//                       userId: parseInt(user_id),
//                       academicYearId: parseInt(academic_year_id),
//                     },
//                   },
//                 },
//               }, // ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏¢‡∏∑‡πà‡∏ô
//             ],
//           },
//         });
//       }
//     }

//     res.json(certificates);
//   } catch (error) {
//     res.status(500).json({ error: "Failed to fetch certificates" });
//   }
// };


// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà (Admin Only)
exports.createCertificate = async (req, res) => {
  const { certificate_code, certificate_name, hours, is_active } = req.body;

  try {
    // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ certificate_code ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingCertificate = await prisma.certificate_types.findUnique({
      where: { certificate_code },
    });

    if (existingCertificate) {
      return res.status(400).json({ error: "Certificate code already exists" });
    }

    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥ ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    const newCertificate = await prisma.certificate_types.create({
      data: {
        certificate_code,
        certificate_name,
        hours,
        is_active: is_active ?? 1,
      },
    });

    res.json({
      message: "Certificate type created successfully",
      data: newCertificate,
    });
  } catch (error) {
    console.error("‚ùå Error creating certificate:", error);
    res.status(500).json({ error: "Failed to create certificate" });
  }
};


// ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á (Admin Only)
exports.updateCertificate = async (req, res) => {
  const { certificate_type_id } = req.params;
  const { certificate_code, certificate_name, hours, is_active } = req.body;

  try {
    const updatedCertificate = await prisma.certificate_types.update({
      where: { certificate_type_id: parseInt(certificate_type_id) },
      data: { certificate_code, certificate_name, hours, is_active },
    });

    res.json({
      message: "Certificate updated successfully",
      data: updatedCertificate,
    });
  } catch (error) {
    res.status(500).json({ error: "Failed to update certificate" });
  }
};

// ‚úÖ ‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á (Admin Only)
exports.deleteCertificate = async (req, res) => {
  const { certificate_type_id } = req.params;

  try {
    await prisma.certificate_types.delete({
      where: { certificate_type_id: parseInt(certificate_type_id) },
    });

    res.json({ message: "Certificate deleted successfully" });
  } catch (error) {
    res.status(500).json({ error: "Failed to delete certificate" });
  }
};


// ‚úÖ ‡∏õ‡∏¥‡∏î/‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á
exports.toggleCertificateStatus = async (req, res) => {
    const { certificate_type_id } = req.params;
    const { is_active } = req.body; // ‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï (0 ‡∏´‡∏£‡∏∑‡∏≠ 1)

    try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const certificate = await prisma.certificate_types.findUnique({
            where: { certificate_type_id: parseInt(certificate_type_id) },
        });

        if (!certificate) {
            return res.status(404).json({ error: "Certificate not found" });
        }

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        const updatedCertificate = await prisma.certificate_types.update({
            where: { certificate_type_id: parseInt(certificate_type_id) },
            data: { is_active: is_active ? 1 : 0 }, // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô 1 ‡∏´‡∏£‡∏∑‡∏≠ 0
        });

        res.json({ message: `Certificate status updated successfully`, data: updatedCertificate });
    } catch (error) {
        res.status(500).json({ error: "Failed to update certificate status" });
    }
};

