generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model academic_years {
  academic_year_id  String         @id @default(uuid()) @db.Char(36)
  year_name         String         @db.VarChar(10)
  start_date        DateTime       @db.Date
  end_date          DateTime       @db.Date
  status            academic_years_status?
  created_at        DateTime       @default(now()) @db.DateTime(0)
  updated_at        DateTime       @default(now()) @db.DateTime(0)

  submissions       submissions[]
}

model linked_volunteer {
  id         String   @id @default(uuid()) @db.Char(36)
  user_id    String   @db.VarChar(50)
  year       String   @db.VarChar(10)
  hours      Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([user_id, year], map: "user_id_year_unique")
}

model submissions {
  submission_id        String              @id @default(uuid()) @db.Char(36)
  user_id              String              @db.Char(36)
  academic_year_id     String              @db.Char(36)
  type                 String              @db.VarChar(50)
  status               submissions_status  @default(submitted)
  rejection_reason     String?             @db.VarChar(255)
  submission_files  submission_files[]
  hours                Int?
  hours_requested      Int?
  certificate_type_id  String?             @db.Char(36)
  created_at           DateTime            @default(now()) @db.DateTime(0)
  updated_at           DateTime            @default(now()) @db.DateTime(0)

  academic_years       academic_years      @relation(fields: [academic_year_id], references: [academic_year_id], onDelete: Cascade)
  users                users               @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  certificate_type     certificate_types?  @relation(fields: [certificate_type_id], references: [certificate_type_id])
  status_logs          submission_status_logs[]

  @@index([academic_year_id])
  @@index([user_id])
  @@index([type])
}

model submission_files {
  id             String  @id @default(uuid())
  submission_id  String
  file_path      String  // path ของไฟล์ที่แนบ
  created_at     DateTime @default(now())

  submission     submissions @relation(fields: [submission_id], references: [submission_id], onDelete: Cascade)
}

model certificate_types {
  certificate_type_id String           @id @default(uuid()) @db.Char(36)
  certificate_code    String           @unique @db.VarChar(50)
  certificate_name    String           @db.VarChar(100)
  hours               Int
  category            String?
  is_active           Int              @default(1) @db.TinyInt
  created_at          DateTime         @default(now()) @db.DateTime(0)
  updated_at          DateTime         @updatedAt @db.DateTime(0)

  submissions         submissions[]
}

model users {
  user_id      String                    @id @default(uuid()) @db.Char(36)
  username     String                    @unique @db.VarChar(50)
  name         String                    @db.VarChar(100)
  faculty      String?                   @db.VarChar(100)
  major        String?                   @db.VarChar(100)
  email        String                    @unique @db.VarChar(100)
  phone        String?                   @db.VarChar(15)
  role         users_role                @default(student)
  refreshToken String?                   @db.Text
  created_at   DateTime                  @default(now()) @db.DateTime(0)
  updated_at   DateTime                  @default(now()) @db.DateTime(0)

  submissions  submissions[]
  status_logs  submission_status_logs[]  @relation("StatusChanger")
}

model submission_status_logs {
  log_id         String             @id @default(uuid()) @db.Char(36)
  submission_id  String             @db.Char(36)
  status         submissions_status
  reason         String?            @db.VarChar(255)
  changed_by     String             @db.Char(36)
  changed_at     DateTime           @default(now()) @db.DateTime(0)

  submission     submissions        @relation(fields: [submission_id], references: [submission_id])
  changed_by_user users             @relation("StatusChanger", fields: [changed_by], references: [user_id])
}

model linked_scholarship {
  id               Int    @id @default(autoincrement())
  student_id      String
  academic_year   String
  type            String

  @@unique([student_id, academic_year, type], name: "unique_scholarship")
}

enum submissions_status {
  submitted
  approved
  rejected
}

enum users_role {
  admin
  student
}

enum academic_years_status {
  OPEN
  CLOSED
  null
}
