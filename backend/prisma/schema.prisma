generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model academic_years {
  academic_year_id  String         @id @default(uuid()) @db.Char(36)
  year_name         String         @db.VarChar(10)
  start_date        DateTime       @db.Date
  end_date          DateTime       @db.Date
  status            academic_years_status?
  created_at        DateTime       @default(now()) @db.DateTime(0)
  updated_at        DateTime       @default(now()) @db.DateTime(0)

  submissions       submissions[]
  activity_limits   activity_limits[]
  projects          projects[]
}

model linked_volunteer {
  id                String   @id @default(uuid()) @db.Char(36)
  user_id           String   @db.VarChar(50)
  year              String   @db.VarChar(10)
  project_name      String?  @db.VarChar(200)
  hours             Int
  activity_type     String?  @db.VarChar(100)
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  @@unique([user_id, year, project_name], map: "user_year_project_unique")
}

model submissions {
  submission_id        String              @id @default(uuid()) @db.Char(36)
  user_id              String              @db.Char(36)
  academic_year_id     String              @db.Char(36)
  type                 String              @db.VarChar(50)
  status               submissions_status  @default(submitted)
  rejection_reason     String?             @db.VarChar(255)
  submission_files  submission_files[]
  hours                Int?
  hours_requested      Int?
  certificate_type_id  String?             @db.Char(36)
  created_at           DateTime            @default(now()) @db.DateTime(0)
  updated_at           DateTime            @default(now()) @db.DateTime(0)

  academic_years       academic_years      @relation(fields: [academic_year_id], references: [academic_year_id], onDelete: Cascade)
  users                users               @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  certificate_type     certificate_types?  @relation(fields: [certificate_type_id], references: [certificate_type_id])
  status_logs          submission_status_logs[]
  notifications        notifications[]     @relation("SubmissionNotifications")

  @@index([academic_year_id])
  @@index([user_id])
  @@index([type])
}

model submission_files {
  id             String  @id @default(uuid())
  submission_id  String
  file_path      String  // path ของไฟล์ที่แนบ
  created_at     DateTime @default(now())

  submission     submissions @relation(fields: [submission_id], references: [submission_id], onDelete: Cascade)
}

model certificate_types {
  certificate_type_id String           @id @default(uuid()) @db.Char(36)
  certificate_code    String           @unique @db.VarChar(50)
  certificate_name    String           @db.VarChar(100)
  hours               Int
  category            String?
  is_active           Int              @default(1) @db.TinyInt
  created_at          DateTime         @default(now()) @db.DateTime(0)
  updated_at          DateTime         @updatedAt @db.DateTime(0)

  submissions         submissions[]
}

model users {
  user_id           String                    @id @default(uuid()) @db.Char(36)
  username          String                    @unique @db.VarChar(50)
  name              String                    @db.VarChar(100)
  faculty           String?                   @db.VarChar(100)
  major             String?                   @db.VarChar(100)
  email             String                    @unique @db.VarChar(100)
  phone             String?                   @db.VarChar(15)
  role              users_role                @default(student)
  refreshToken      String?                   @db.Text
  isSenior          Boolean?
  studentStatusName student_status?
  finishedAcadYear  String?                   @db.VarChar(10)
  scholarship_type   scholarship_type?
  created_at        DateTime                  @default(now()) @db.DateTime(0)
  updated_at        DateTime                  @default(now()) @db.DateTime(0)

  submissions        submissions[]
  status_logs        submission_status_logs[]  @relation("StatusChanger")
  notifications      notifications[]           @relation("UserNotifications")
  posts              posts[]                   @relation("PostAuthor")
  created_projects   projects[]                @relation("ProjectCreator")
  reviewed_projects  projects[]                @relation("ProjectReviewer")
  project_participants project_participants[]  @relation("ProjectParticipant")
}

model submission_status_logs {
  log_id         String             @id @default(uuid()) @db.Char(36)
  submission_id  String             @db.Char(36)
  status         submissions_status
  reason         String?            @db.VarChar(255)
  changed_by     String?             @db.Char(36)
  changed_at     DateTime           @default(now()) @db.DateTime(0)

  submission     submissions        @relation(fields: [submission_id], references: [submission_id])
  changed_by_user users?             @relation("StatusChanger", fields: [changed_by], references: [user_id])
}

model linked_scholarship {
  id               Int    @id @default(autoincrement())
  student_id      String
  academic_year   String
  type            String

  @@unique([student_id, academic_year], name: "student_id_academic_year")
}

model notifications {
  notification_id  String             @id @default(uuid()) @db.Char(36)
  user_id          String             @db.Char(36)
  type             notification_type
  title            String             @db.VarChar(255)
  message          String             @db.Text
  read_status      Boolean            @default(false)
  submission_id    String?            @db.Char(36)
  created_at       DateTime           @default(now()) @db.DateTime(0)

  user            users              @relation("UserNotifications", fields: [user_id], references: [user_id], onDelete: Cascade)
  submission      submissions?       @relation("SubmissionNotifications", fields: [submission_id], references: [submission_id], onDelete: Cascade)

  @@index([user_id, created_at(sort: Desc)], name: "idx_user_created")
  @@index([user_id, read_status, created_at(sort: Desc)], name: "idx_user_read_created")
  @@index([type, created_at], name: "idx_type_created")
}

model post_categories {
  category_id     String    @id @default(uuid()) @db.Char(36)
  name            String    @db.VarChar(100)
  description     String?   @db.Text
  color           String?   @db.VarChar(10)
  is_active       Boolean   @default(true)
  created_at      DateTime  @default(now()) @db.DateTime(0)
  updated_at      DateTime  @updatedAt @db.DateTime(0)

  posts           posts[]
}

model posts {
  post_id         String        @id @default(uuid()) @db.Char(36)
  title           String        @db.VarChar(255)
  content         String        @db.LongText
  author_id       String        @db.Char(36)
  category_id     String        @db.Char(36)
  featured_image  String?       @db.VarChar(500)
  is_pinned       Boolean       @default(false)
  is_published    Boolean       @default(true)
  view_count      Int           @default(0)
  created_at      DateTime      @default(now()) @db.DateTime(0)
  updated_at      DateTime      @updatedAt @db.DateTime(0)

  author          users         @relation("PostAuthor", fields: [author_id], references: [user_id], onDelete: Cascade)
  category        post_categories @relation(fields: [category_id], references: [category_id])
  attachments     post_attachments[]

  @@index([category_id])
  @@index([author_id])
  @@index([created_at])
  @@index([is_published])
}

// =====================================================
// PROJECTS SYSTEM
// =====================================================

model projects {
  project_id       String              @id @default(uuid()) @db.Char(36)
  project_name     String              @db.VarChar(255)
  project_type     project_type
  description      String?             @db.Text

  // วันที่และสถานที่
  start_date       DateTime            @db.DateTime(0)
  end_date         DateTime            @db.DateTime(0)
  location         String?             @db.VarChar(255)
  campus           String?             @db.VarChar(100)
  province         String?             @db.VarChar(100)

  hours_per_person Int

  created_by       String              @db.Char(36)
  academic_year_id String              @db.Char(36)
  status           project_status      @default(draft)

  rejection_reason String?             @db.Text
  reviewed_by      String?             @db.Char(36)
  reviewed_at      DateTime?           @db.DateTime(0)

  submitted_at     DateTime?           @db.DateTime(0)
  resubmit_count   Int                 @default(0)

  created_at       DateTime            @default(now()) @db.DateTime(0)
  updated_at       DateTime            @updatedAt @db.DateTime(0)

  creator          users               @relation("ProjectCreator", fields: [created_by], references: [user_id])
  reviewer         users?              @relation("ProjectReviewer", fields: [reviewed_by], references: [user_id])
  academic_year    academic_years      @relation(fields: [academic_year_id], references: [academic_year_id])

  participants     project_participants[]
  files            project_files[]

  @@index([created_by])
  @@index([academic_year_id])
  @@index([status])
  @@index([project_type])
  @@index([province])
  @@index([created_at])
}

model project_participants {
  participant_id   String              @id @default(uuid()) @db.Char(36)
  project_id       String              @db.Char(36)
  user_id          String              @db.Char(36)

  status           participant_status  @default(pending)
  hours_received   Int?
  rejection_reason String?             @db.Text

  added_at         DateTime            @default(now()) @db.DateTime(0)
  approved_at      DateTime?           @db.DateTime(0)

  project          projects            @relation(fields: [project_id], references: [project_id], onDelete: Cascade)
  user             users               @relation("ProjectParticipant", fields: [user_id], references: [user_id])
  files            project_files[]     @relation("ParticipantFiles")

  @@unique([project_id, user_id])
  @@index([user_id])
  @@index([project_id])
  @@index([status])
}

model project_files {
  file_id                    String                 @id @default(uuid()) @db.Char(36)
  project_id                 String                 @db.Char(36)
  file_path                  String                 @db.VarChar(500)
  document_type              String                 @db.VarChar(100)
  note                       String?                @db.VarChar(255)
  added_with_participant_id  String?                @db.Char(36)
  uploaded_at                DateTime               @default(now()) @db.DateTime(0)

  project                    projects               @relation(fields: [project_id], references: [project_id], onDelete: Cascade)
  added_with_participant     project_participants?  @relation("ParticipantFiles", fields: [added_with_participant_id], references: [participant_id], onDelete: Cascade)

  @@index([project_id])
  @@index([added_with_participant_id])
}

// =====================================================
// POSTS SYSTEM
// =====================================================

model post_attachments {
  attachment_id   String    @id @default(uuid()) @db.Char(36)
  post_id         String    @db.Char(36)
  file_name       String    @db.VarChar(255)
  file_path       String    @db.VarChar(500)
  file_size       BigInt
  file_type       String    @db.VarChar(100)
  created_at      DateTime  @default(now()) @db.DateTime(0)

  post            posts     @relation(fields: [post_id], references: [post_id], onDelete: Cascade)
}

enum submissions_status {
  submitted
  approved
  rejected
}

enum users_role {
  admin
  student
}

enum student_status {
  normal      @map("ปกติ")
  withdrawn   @map("ลาออก")
  dropped     @map("ตกออก")
  graduated   @map("สำเร็จการศึกษา")
  on_leave    @map("ลาพัก")
  expelled    @map("คัดชื่อออก")
  transferred @map("โอนย้ายหลักสูตร")
  deceased    @map("เสียชีวิต")
}

enum notification_type {
  APPROVED
  REJECTED
  DEADLINE_WARNING
  HOURS_COMPLETE
  ANNOUNCEMENT
}

enum academic_years_status {
  OPEN
  CLOSED
  null
}

enum scholarship_type {
  TYPE1    @map("ลักษณะที่ 1")
  TYPE2    @map("ลักษณะที่ 2")
  TYPE3    @map("ลักษณะที่ 3")
}

enum project_type {
  religious            @map("ทำนุบำรุงศาสนสถาน")
  social_development   @map("พัฒนาโรงเรียน/ชุมชน")
  university_activity  @map("กิจกรรมภายในมหาวิทยาลัย")
}

enum project_status {
  draft      @map("ฉบับร่าง")
  submitted  @map("รอการอนุมัติ")
  approved   @map("อนุมัติแล้ว")
  rejected   @map("ไม่อนุมัติ")
}

enum participant_status {
  pending    @map("รอการอนุมัติ")
  approved   @map("อนุมัติแล้ว")
  rejected   @map("ไม่อนุมัติ")
}

enum activity_type {
  Certificate           @map("Certificate")
  BloodDonate           @map("BloodDonate")
  NSF                   @map("NSF")
  AOM_YOUNG             @map("AOM YOUNG")
  religious             @map("religious")
  social_development    @map("social-development")
  tree_planting         @map("ต้นไม้ล้านต้น ล้านความดี")
}

model activity_limits {
  limit_id          String              @id @default(uuid()) @db.Char(36)
  activity_type     activity_type
  max_hours         Int
  academic_year_id  String              @db.Char(36)
  is_active         Boolean             @default(true)
  description       String?             @db.Text
  created_at        DateTime            @default(now()) @db.DateTime(0)
  updated_at        DateTime            @updatedAt @db.DateTime(0)

  academic_year     academic_years      @relation(fields: [academic_year_id], references: [academic_year_id], onDelete: Cascade)

  @@unique([activity_type, academic_year_id])
  @@index([academic_year_id])
  @@index([activity_type])
}